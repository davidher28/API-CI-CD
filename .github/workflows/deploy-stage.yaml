name: Deploy Stage
run-name: Deploy Stage - ${{ github.ref }}

on:
  push:
    branches:
      - master

jobs:
  # ------------------------------- Commit Stage ------------------------------- #
  commit_stage:
    name: Commit Stage
    uses: ./.github/workflows/commit-stage.yaml

  # ------------------------------- Integration Tests ------------------------------- #
  integration_test:
    runs-on: ubuntu-22.04
    needs: commit_stage
    name: Integration Test
    steps:
      - uses: actions/checkout@v4

      - name: Restore cache from the build stage
        id: restore-cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.cache/go-build
          key: go-${{ hashFiles('**/go.sum') }}

      - name: Install cached dependencies
        id: restore-dependencies
        run: |
          cd src
          go mod tidy

      - name: Integration Testing with Golang httptest package
        id: unit_test
        run: |
          cd src
          go test -tags=integration ./... -v

  # ------------------------------- Image Versioning ------------------------------- #
  publish:
    runs-on: ubuntu-22.04
    needs: integration_test
    name: Publish Image
    outputs:
      old_tag: ${{ steps.get-previous-tag.outputs.old_tag }}
      new_tag: ${{ steps.tagging.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4

      - name: Determine the previous tag
        id: get-previous-tag
        run: |
          export PREVIOUS_TAG=$(git describe --tags --abbrev=0)
          echo "old_tag=$PREVIOUS_TAG" >> "$GITHUB_OUTPUT"

      - name: Bump Application Version
        id: tagging
        uses: anothrNick/github-tag-action@1.64.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true

      - name: Buildah Build
        id: build-image
        uses: redhat-actions/buildah-build@v2.12
        with:
          image: ${{ vars.DOCKERHUB_USERNAME }}/api
          tags: ${{ steps.tagging.outputs.new_tag }}
          containerfiles: ./Dockerfile

      - name: Push To Docker Hub
        id: push-to-docker
        uses: redhat-actions/push-to-registry@v2.7.1
        with:
          image: ${{ steps.build-image.outputs.image }}
          tags: ${{ steps.build-image.outputs.tags }}
          registry: docker.io
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Print image url
        run: echo "Image pushed to ${{ steps.push-to-docker.outputs.registry-paths }}"

  # ------------------------------- Red Hat OpenShift Blue/Green Deployment ------------------------------- #
  deployment:
    runs-on: ubuntu-22.04
    needs: publish
    name: Deploy Blue & Green Instances
    outputs:
      route: ${{ steps.expose-app.outputs.route }}
    steps:
      - uses: actions/checkout@v4

      - name: Log in to OpenShift
        id: openshift-login
        uses: redhat-actions/oc-login@v1.2
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          namespace: ${{ vars.OPENSHIFT_NAMESPACE }}

      - name: Deploy Blue Instance
        id: deploy-blue
        run: |
          export PREVIOUS_IMAGE="docker.io/${{ vars.DOCKERHUB_USERNAME }}/api:${{ needs.publish.outputs.old_tag }}"

          oc delete all --selector="app=${{ vars.BLUE_APP_NAME }}"
          oc new-app "$PREVIOUS_IMAGE" --name="${{ vars.BLUE_APP_NAME }}"

      - name: Deploy Green Instance
        id: deploy-green
        run: |
          export CURRENT_IMAGE="docker.io/${{ vars.DOCKERHUB_USERNAME }}/api:${{ needs.publish.outputs.new_tag }}"

          oc delete all --selector="app=${{ vars.GREEN_APP_NAME }}"
          oc new-app "$CURRENT_IMAGE" --name="${{ vars.GREEN_APP_NAME }}"

      - name: Expose app
        id: expose-app
        run: |
          oc delete route ${{ vars.APP_NAME }} --ignore-not-found=true
          oc expose svc/${{ vars.BLUE_APP_NAME }} --name=${{ vars.APP_NAME }}
          oc patch route/${{ vars.APP_NAME }} -p '{"spec":{"to":{"name":"'"${{ vars.GREEN_APP_NAME }}"'"}}}'

          export ROUTE="$(oc get route ${{ vars.APP_NAME }} -o jsonpath='{.spec.host}')"
          echo "route=$ROUTE" >> "$GITHUB_OUTPUT"

  deployment_test:
    runs-on: ubuntu-22.04
    needs: deployment
    name: Deployment Test
    steps:
      - uses: actions/checkout@v4

      # ------------------------------- Deployment Test ------------------------------- #
      - name: Test application deployment
        id: test_deploy
        uses: nick-fields/retry@v3
        with:
          timeout_seconds: 3
          retry_wait_seconds: 10
          max_attempts: 30
          warning_on_retry: false
          command: curl -sSfL ${{ needs.deployment.outputs.route }}
